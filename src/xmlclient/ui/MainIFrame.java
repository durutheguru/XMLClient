/*
 * To change this template, choose Tools | Templates
    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

 * and open the template in the editor.
 */
package xmlclient.ui;

/**
 *
 * @author Duru Dumebi Julian
 */

import org.w3c.dom.Document;

import java.io.File;
import java.io.IOException;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;

import javax.swing.KeyStroke;
import javax.swing.text.Keymap;
import javax.swing.AbstractAction;
import javax.swing.JOptionPane;

import javax.xml.parsers.ParserConfigurationException;

import static javax.swing.Action.NAME;
import static javax.swing.Action.SHORT_DESCRIPTION;

import code.io.FileInterface;

import xmlclient.net.Client;
import xmlclient.History;
import xmlclient.ui.dialog.Message;
import xmlclient.ui.dialog.HistoryDialog;
import xmlclient.xml.XMLTableModel;
import xmlclient.xml.XMLProcessor;


public class MainIFrame extends javax.swing.JInternalFrame {

    private AbstractAction goAction = new GoAction(), clearAction = new ClearAction();
    
    /**
     * Creates new form MainIFrame
     */
    public MainIFrame() {
        super("Terminal");
        initComponents();
        
        registerQueryAreaKeyStrokes();
    }
    
    private void registerQueryAreaKeyStrokes(){        
        Keymap map = queryArea.getKeymap();
        
        KeyStroke goKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.CTRL_MASK | KeyEvent.SHIFT_MASK);
        map.addActionForKeyStroke(goKeyStroke, goAction);
        
        KeyStroke clearKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_MASK | KeyEvent.SHIFT_MASK);
        map.addActionForKeyStroke(clearKeyStroke, clearAction);
        
        KeyStroke backKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_B, KeyEvent.CTRL_MASK | KeyEvent.SHIFT_MASK);
        map.addActionForKeyStroke(backKeyStroke, ((ActionLabel)backLabel).getAction());
                
        KeyStroke fwdKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_MASK | KeyEvent.SHIFT_MASK);
        map.addActionForKeyStroke(fwdKeyStroke, ((ActionLabel)forwardLabel).getAction());
        
        KeyStroke historyKeyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_H, KeyEvent.CTRL_MASK | KeyEvent.SHIFT_MASK);
        map.addActionForKeyStroke(historyKeyStroke, ((ActionLabel)historyLabel).getAction());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        dbField = new javax.swing.JTextField();
        selectDbButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        queryLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        southPanel = new javax.swing.JPanel();
        historyLabel = new ActionLabel("History", new AbstractAction(){
            @Override
            public void actionPerformed(ActionEvent e){
                new HistoryDialog(ClientFrame.getInstance(), true).setVisible(true);
            }
        });
        jScrollPane2 = new javax.swing.JScrollPane();
        queryArea = new javax.swing.JTextArea();
        goButton = new javax.swing.JButton(goAction);
        jLabel2 = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton(clearAction);
        importButton = new javax.swing.JButton();
        backLabel = new ActionLabel(new AbstractAction(){
            @Override
            public void actionPerformed(ActionEvent e){
                setHistoryQuery(History.back(), false);
            }
        });
        forwardLabel = new ActionLabel(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e){
                setHistoryQuery(History.forward(), false);
            }

        });

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Terminal");
        setMinimumSize(new java.awt.Dimension(500, 350));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Database:");

        dbField.setEditable(false);
        dbField.setForeground(new java.awt.Color(102, 102, 102));
        dbField.setText("mysql");

        selectDbButton.setText("Select...");
        selectDbButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDbButtonActionPerformed(evt);
            }
        });

        mainPanel.setLayout(new java.awt.BorderLayout());
        mainPanel.add(queryLabel, java.awt.BorderLayout.PAGE_START);

        resultTable.setAutoCreateRowSorter(true);
        resultTable.setModel(XMLTableModel.getInstance());
        resultTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        resultTable.setCellSelectionEnabled(true);
        resultTable.setFillsViewportHeight(true);
        jScrollPane1.setViewportView(resultTable);

        mainPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        southPanel.setBackground(new java.awt.Color(153, 153, 255));

        historyLabel.setText("<html><a href=\"\">History</a></html>");
        historyLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        historyLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyLabelMouseClicked(evt);
            }
        });

        queryArea.setColumns(20);
        queryArea.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        queryArea.setForeground(new java.awt.Color(255, 51, 51));
        queryArea.setLineWrap(true);
        queryArea.setRows(5);
        queryArea.setTabSize(2);
        queryArea.setWrapStyleWord(true);
        queryArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                queryAreaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                queryAreaMousePressed(evt);
            }
        });
        queryArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                queryAreaFocusGained(evt);
            }
        });
        queryArea.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                queryAreaCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jScrollPane2.setViewportView(queryArea);

        goButton.setText("Go");
        goButton.setOpaque(false);

        jLabel2.setText("Query:");

        clearButton.setText("Clear");
        clearButton.setOpaque(false);

        importButton.setText("Import");
        importButton.setOpaque(false);
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout southPanelLayout = new javax.swing.GroupLayout(southPanel);
        southPanel.setLayout(southPanelLayout);
        southPanelLayout.setHorizontalGroup(
            southPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(southPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(southPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(historyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(importButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addContainerGap())
        );
        southPanelLayout.setVerticalGroup(
            southPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, southPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(southPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(southPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(southPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(importButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(southPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(goButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, southPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(historyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 36, Short.MAX_VALUE)))
                .addContainerGap())
        );

        backLabel.setText("<html><a href=\"\">Back</a></html>");
        backLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backLabel.setEnabled(false);

        forwardLabel.setText("<html><a href=\"\">Forward</a></html>");
        forwardLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        forwardLabel.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dbField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectDbButton)
                        .addGap(70, 70, 70))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(southPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(forwardLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(forwardLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dbField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectDbButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(southPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(this, "You are about to disconnect from the server. Proceed?",
                "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            try {
                Client.stopClient();
            }
            catch (IOException ex) {
                Message.showErrorDialog("Error encountered while trying to stop client", this);
                ClientFrame.getInstance().appendMessage("ERROR: Unable to stop client thread. Cause: " + ex.getMessage());
                ex.printStackTrace();
            }
            
            dispose();
        }      
    }//GEN-LAST:event_formInternalFrameClosing

    private void selectDbButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDbButtonActionPerformed
        // TODO add your handling code here:
        try{
            Document document = XMLProcessor.createDatabasesRequest();
            Client.getInstance().sendRequest(document);

            ClientFrame.getInstance().appendMessage("LOG: View databases request sent");            
        }
        catch(IOException e){
            Message.showErrorDialog("Unable to send request to server.\nError:" + e.getMessage(), MainIFrame.this);
            e.printStackTrace();
        }
        catch(ParserConfigurationException e){
            Message.showErrorDialog("An internal error has prevented the application from making the request. ", MainIFrame.this);
            e.printStackTrace();
        }
        catch(Exception e){
            Message.showErrorDialog("An internal error has pccured", MainIFrame.this);
            e.printStackTrace();
        }
    }//GEN-LAST:event_selectDbButtonActionPerformed

    private void historyLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_historyLabelMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_historyLabelMouseClicked

    private void queryAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queryAreaMouseClicked
        // TODO add your handling code here:
        int count = evt.getClickCount();
        
        if (count == 1 && queryArea.getText().equals("")){
            queryArea.selectAll();
        }
        else if (count == 5)
            clearAction.actionPerformed(new ActionEvent(queryArea, evt.getID(), "Clicked"));
    }//GEN-LAST:event_queryAreaMouseClicked

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        // TODO add your handling code here:
        File f = FileInterface.selectFile(this);
        if (f != null){
            try{
                queryArea.setText(new String(FileInterface.getFileContent(f)));
            }
            catch(IOException io){
                Message.showErrorDialog("Unable to read file", this);
            }
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void queryAreaCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_queryAreaCaretPositionChanged
        // TODO add your handling code here:
        queryArea.selectAll();
    }//GEN-LAST:event_queryAreaCaretPositionChanged

    private void queryAreaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queryAreaMousePressed
        // TODO add your handling code here:
        queryAreaMouseClicked(evt);
    }//GEN-LAST:event_queryAreaMousePressed

    private void queryAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_queryAreaFocusGained
        // TODO add your handling code here:
        queryArea.selectAll();
    }//GEN-LAST:event_queryAreaFocusGained

    private void clearQuery(){        
        queryArea.setText("");
    }
    
    private void doQuery(){
        final String query = queryArea.getText();
        if (query.equals(""))
            return;
        
        if (query.indexOf("drop database") != -1)
            dbField.setText("mysql");
        
        try{
            Document doc = XMLProcessor.convertToRequest(query);
            Client.getInstance().sendRequest(doc);

            ClientFrame.getInstance().appendMessage("LOG: Request sent [" + query + "]");
        }
        catch(IOException e){
            Message.showErrorDialog("Unable to send request to server.\nError:" + e.getMessage(), MainIFrame.this);
            e.printStackTrace();
        }
        catch(ParserConfigurationException e){
            Message.showErrorDialog("An internal error has prevented the application from making the request. ", MainIFrame.this);
            e.printStackTrace();
        }
        catch(Exception e){
            Message.showErrorDialog("An internal error has occured", MainIFrame.this);
            e.printStackTrace();
        }
        
        refreshTransitionLabels();
    }
    
    public void setHistoryQuery(String q, boolean run){
        if (q.equals(""))
            return;
        
        int index = q.lastIndexOf("[");
        String query = q.substring(0, index);
        String db = q.substring(index + 1, q.length() - 1);
        
        setDB(db);
        setQuery(query, run);
    }
    
    public void setQuery(String q, boolean run){
        queryArea.setText(q);
        if (run)
            doQuery();
        else
            refreshTransitionLabels();
    }
    
    public void canRequest(boolean value){
        queryArea.setEnabled(value);
        goButton.setEnabled(value);
    }
    
    public String getSelectedDatabase(){
        if (dbField.getText().equals(""))
            return "mysql";
        
        return dbField.getText();
    }
    
    public void setDB(String db){
        if (db != null)
            dbField.setText(db);
    }
    
    private void refreshTransitionLabels(){
        backLabel.setEnabled(History.canGoBack());
        forwardLabel.setEnabled(History.canGoForward());
    }
    
    private class ClearAction extends AbstractAction {

        public ClearAction(){
            super();
            putValue(NAME, "Clear");
            putValue(SHORT_DESCRIPTION, "Clear query field. Ctrl+Shift+X");
        }
        
        @Override
        public void actionPerformed(ActionEvent e) {
            clearQuery();
        }
        
    }
    
    private class GoAction extends AbstractAction {
        
        public GoAction(){
            super();
            putValue(NAME, "Go");
            putValue(SHORT_DESCRIPTION, "Execute sql statement. Ctrl+Shift+ENTER");
        }
        
        @Override
        public void actionPerformed(ActionEvent e){
            if (queryArea.getText().equals(""))
                return;
            
            History.addQuery(queryArea.getText() + "[" + dbField.getText() + "]");
            doQuery();
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField dbField;
    private javax.swing.JLabel forwardLabel;
    private javax.swing.JButton goButton;
    private javax.swing.JLabel historyLabel;
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea queryArea;
    private javax.swing.JLabel queryLabel;
    private javax.swing.JTable resultTable;
    private javax.swing.JButton selectDbButton;
    private javax.swing.JPanel southPanel;
    // End of variables declaration//GEN-END:variables
}
